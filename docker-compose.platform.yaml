x-logging: &default-logging
  options:
    max-size: "50m"

volumes:
  postgres-platform-volume:
  redis-platform-volume:

networks:
  dojo-platform:
    name: dojo-platform
  # Applicable only for sidecar and miner service
  subtensor:
    name: subtensor

services:
  redis:
    extends:
      file: docker-compose.shared.yaml
      service: redis
    volumes:
      - redis-platform-volume:/data
    networks:
      - dojo-platform

  postgres:
    extends:
      file: docker-compose.shared.yaml
      service: postgres
    volumes:
      - postgres-platform-volume:/var/lib/postgresql/data
    networks:
      - dojo-platform

  prisma-setup-platform:
    container_name: prisma-setup-platform
    platform: linux/amd64
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker/Dockerfile.prisma
    working_dir: /app
    depends_on:
      - postgres
    networks:
      - dojo-platform
    logging: *default-logging

  sidecar:
    container_name: substrate-sidecar
    image: docker.io/parity/substrate-api-sidecar:v19.3.1
    env_file:
      - .env
    read_only: true
#    environment:
#      SAS_SUBSTRATE_URL: ${SUBTENSOR_ENDPOINT:-wss://entrypoint-finney.opentensor.ai}
#      SAS_EXPRESS_PORT: 8081
    expose:
      - 8081
    healthcheck:
      # jank since no curl
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const options = { hostname: '127.0.0.1', port: 8081, path: '/blocks/head', method: 'GET' }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', (error) => { console.error(error); process.exit(1); }); req.end();",
        ]
      interval: 12s
      timeout: 24s
      retries: 10
      start_period: 30s
    networks:
      - dojo-platform
      - subtensor
    logging: *default-logging

  worker-api:
    container_name: worker-api
    image: ghcr.io/tensorplex-labs/dojo-worker-api:main
    platform: linux/amd64
    env_file:
      - .env
    volumes:
      - ./.env:/dojo-api/.env
    ports:
      - "8080:8080"
    expose:
      - 8080
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sidecar:
        condition: service_healthy
      prisma-setup-platform:
        condition: service_completed_successfully
    command: ["./service", "--debug"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 90s # seems too long but let's just give enough time so that healthcheck doesn't fail
    networks:
      - dojo-platform
    logging: *default-logging

  worker-ui:
    container_name: worker-ui
    build:
      context: https://github.com/tensorplex-labs/dojo-ui.git
      args:
        NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://127.0.0.1:8080}
        NEXT_PUBLIC_GA_TAG: ${NEXT_PUBLIC_GA_TAG:-G-DEVELOPMENT}
      dockerfile_inline: |
        FROM --platform=linux/amd64 node:21.7.3 AS builder

        WORKDIR /dojo-ui

        COPY package.json package-lock.json* ./
        RUN npm install --force

        COPY . .

        ARG NEXT_PUBLIC_BACKEND_URL
        ARG NEXT_PUBLIC_GA_TAG
        ENV NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL
        ENV NEXT_PUBLIC_GA_TAG=$NEXT_PUBLIC_GA_TAG

        RUN echo "NEXT_PUBLIC_BACKEND_URL = $NEXT_PUBLIC_BACKEND_URL"
        RUN echo "NEXT_PUBLIC_GA_TAG = $NEXT_PUBLIC_GA_TAG"

        RUN npm run build

        FROM --platform=linux/amd64 node:21.7.3-alpine

        RUN apk add --no-cache bash

        WORKDIR /dojo-ui

        COPY --from=builder /dojo-ui/next.config.mjs ./
        COPY --from=builder /dojo-ui/public ./public
        COPY --from=builder /dojo-ui/.next ./.next
        COPY --from=builder /dojo-ui/node_modules ./node_modules
        COPY --from=builder /dojo-ui/package.json ./
        COPY --from=builder /dojo-ui/entrypoint.sh ./entrypoint.sh

        ENTRYPOINT ["./entrypoint.sh"]
    environment:
      - DISABLE_CSP=${DISABLE_CSP:-true}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - dojo-platform
    logging: *default-logging
