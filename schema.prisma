generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
    output               = "./database/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum TaskTypeEnum {
    CODE_GENERATION
    TEXT_TO_IMAGE
    TEXT_TO_THREE_D
    TEXT_TO_COMPLETION
    SCORE_FEEDBACK
}

enum CriteriaTypeEnum {
    RANKING_CRITERIA
    MULTI_SCORE
    SCORE
    MULTI_SELECT
    TEXT
}

enum HFLStatusEnum {
    TF_PENDING // TF created, waiting for feedback, no TASK_RESULT yet
    TF_COMPLETED // TF task completed, and TASK_RESULT are updated, waiting for synthetic request
    SF_PENDING // SF created, waiting for scores from miners
    SF_COMPLETED // SF task results received from miners
    HFL_COMPLETED // HFL loop finished
}

model ValidatorTask {
    id               String       @id @unique @default(uuid())
    previous_task_id String?
    prompt           String
    task_type        TaskTypeEnum
    is_processed     Boolean      @default(false)
    expire_at        DateTime
    created_at       DateTime     @default(now())
    updated_at       DateTime     @updatedAt
    metadata         Json?        @db.JsonB
    hfl_state_id     String?

    // Relationships
    parent_task     ValidatorTask?  @relation("PreviousTask", fields: [previous_task_id], references: [id])
    child_tasks     ValidatorTask[] @relation("PreviousTask")
    completions     Completion[]
    miner_responses MinerResponse[]
    ground_truth    GroundTruth[]
    HFLState        HFLState?       @relation(fields: [hfl_state_id], references: [id])

    @@index([task_type, is_processed])
    @@index([expire_at])
    @@map("validator_task")
}

model MinerResponse {
    id                String   @id @unique @default(uuid())
    validator_task_id String
    dojo_task_id      String
    hotkey            String
    coldkey           String
    task_result       Json     @db.JsonB
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    // Relationships
    validator_task_relation ValidatorTask @relation(fields: [validator_task_id], references: [id])
    scores                  MinerScore[]

    @@unique([validator_task_id, dojo_task_id, hotkey])
    @@index([dojo_task_id])
    @@map("miner_response")
}

model Completion {
    id                String   @id @default(uuid())
    completion_id     String
    validator_task_id String
    model             String
    completion        Json     @db.JsonB
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    // Relationships
    validator_task_relation ValidatorTask @relation(fields: [validator_task_id], references: [id])
    criterion               Criterion[]

    @@map("completion")
}

model Criterion {
    id            String           @id @default(uuid())
    completion_id String
    criteria_type CriteriaTypeEnum
    config        Json             @db.JsonB // Type-specific configuration
    created_at    DateTime         @default(now())
    updated_at    DateTime         @updatedAt

    // Relationships
    completion_relation Completion   @relation(fields: [completion_id], references: [id], onDelete: Cascade)
    scores              MinerScore[]

    @@map("criterion")
}

model MinerScore {
    id                String   @id @default(uuid())
    criterion_id      String
    miner_response_id String
    scores            Json     @db.JsonB // Type-specific score value
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    // Relationships
    criterion_relation      Criterion     @relation(fields: [criterion_id], references: [id], onDelete: Cascade)
    miner_response_relation MinerResponse @relation(fields: [miner_response_id], references: [id], onDelete: Cascade)

    @@unique([criterion_id, miner_response_id])
    @@map("miner_score")
}

model GroundTruth {
    id                  String   @id @default(uuid())
    validator_task_id   String
    obfuscated_model_id String
    real_model_id       String
    rank_id             Int
    ground_truth_score  Float
    created_at          DateTime @default(now())
    updated_at          DateTime @updatedAt

    // Relationships
    validator_task_relation ValidatorTask @relation(fields: [validator_task_id], references: [id])

    @@unique([validator_task_id, obfuscated_model_id, rank_id])
    @@map("ground_truth")
}

// old schema
model Ground_Truth_Model {
    id                  String                 @id @default(uuid())
    request_id          String
    obfuscated_model_id String
    real_model_id       String
    rank_id             Int
    feedback_request    Feedback_Request_Model @relation(fields: [feedback_request_id], references: [id])
    feedback_request_id String
    created_at          DateTime               @default(now())
    updated_at          DateTime               @updatedAt

    @@unique([request_id, obfuscated_model_id, rank_id])
}

model Feedback_Request_Model {
    id             String                      @id @unique @default(uuid())
    request_id     String
    prompt         String
    completions    Completion_Response_Model[]
    task_type      String
    criteria_types Criteria_Type_Model[]
    is_processed   Boolean                     @default(false)
    dojo_task_id   String?
    hotkey         String
    expire_at      DateTime
    created_at     DateTime                    @default(now())
    updated_at     DateTime                    @updatedAt

    ground_truths Ground_Truth_Model[]

    parent_request Feedback_Request_Model?  @relation("ParentChild", fields: [parent_id], references: [id])
    parent_id      String?
    child_requests Feedback_Request_Model[] @relation("ParentChild")

    @@unique([request_id, hotkey])
    @@index([parent_id])
}

model Completion_Response_Model {
    id                        String                 @id @default(uuid())
    completion_id             String
    model                     String
    completion                Json
    rank_id                   Int?
    score                     Float?
    created_at                DateTime               @default(now())
    updated_at                DateTime               @updatedAt
    feedback_request_relation Feedback_Request_Model @relation(fields: [feedback_request_id], references: [id])
    feedback_request_id       String
}

model Criteria_Type_Model {
    id                        String                  @id @default(uuid())
    type                      CriteriaTypeEnum
    options                   Json
    min                       Float?
    max                       Float?
    feedback_request_relation Feedback_Request_Model? @relation(fields: [feedback_request_id], references: [id])
    feedback_request_id       String?
    created_at                DateTime                @default(now())
    updated_at                DateTime                @updatedAt
}

model Score_Model {
    id         String   @id @default(uuid())
    // json array of scores
    score      Json
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model HFLState {
    id                       String          @id @default(uuid())
    original_task_id         String // original task that started HFL
    current_task_id          String // current task in the process
    current_iteration        Int             @default(1)
    current_synthetic_req_id String? // Null when not in synthetic phase
    status                   HFLStatusEnum // Current state of the HFL process (e.g., TF_PENDING, TF_COMPLETE, SF_PENDING)
    events                   Json[]          @db.JsonB // Array of state transition events with metadata
    created_at               DateTime        @default(now())
    updated_at               DateTime        @updatedAt
    ValidatorTask            ValidatorTask[]

    @@unique([original_task_id, current_task_id])
    @@map("hfl_state")
}

// relational table to decouple things needed for HFL from completion table
model HFLCompletionRelation {
    id               String   @id @default(uuid())
    tf_completion_id String
    sf_completion_id String
    created_at       DateTime @default(now())
    updated_at       DateTime @updatedAt

    @@map("hfl_completion_relation")
}
